"""
Westend Hackathon - Adat El≈ëk√©sz√≠t√©s
=====================================

Ez a modul felel≈ës az adatok bet√∂lt√©s√©√©rt, tiszt√≠t√°s√°√©rt √©s el≈ëk√©sz√≠t√©s√©√©rt
a l√°togat√≥sz√°m el≈ërejelz≈ë modell sz√°m√°ra.
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

class DataPreparation:
    def __init__(self):
        self.scaler = StandardScaler()
        self.label_encoders = {}
        
    def generate_sample_data(self, start_date='2022-01-01', days=730):
        """
        Minta adatok gener√°l√°sa a hackathon demonstr√°ci√≥hoz
        
        Args:
            start_date (str): Kezd≈ë d√°tum
            days (int): Napok sz√°ma
            
        Returns:
            pd.DataFrame: Gener√°lt adatok
        """
        print("üîÑ Minta adatok gener√°l√°sa...")
        
        # D√°tumok gener√°l√°sa
        dates = pd.date_range(start=start_date, periods=days, freq='D')
        
        # Alapvet≈ë adatok inicializ√°l√°sa
        data = []
        
        for date in dates:
            # Szezon meghat√°roz√°sa (1-4: t√©l, tavasz, ny√°r, ≈ësz)
            month = date.month
            if month in [12, 1, 2]:
                season = 1  # T√©l
            elif month in [3, 4, 5]:
                season = 2  # Tavasz
            elif month in [6, 7, 8]:
                season = 3  # Ny√°r
            else:
                season = 4  # ≈êsz
            
            # H√©tv√©ge √©s h√©t napja
            day_of_week = date.weekday() + 1  # 1-7 (h√©tf≈ë-vas√°rnap)
            is_weekend = 1 if day_of_week in [6, 7] else 0
            
            # √únnepnapok szimul√°l√°sa (egyszer≈±s√≠tett)
            holidays = [
                (1, 1),   # √öj√©v
                (3, 15),  # Nemzeti √ºnnep
                (5, 1),   # Munka √ºnnepe
                (8, 20),  # Szent Istv√°n nap
                (10, 23), # Nemzeti √ºnnep
                (11, 1),  # Mindenszentek
                (12, 24), # Szenteste
                (12, 25), # Kar√°csony
                (12, 26)  # Kar√°csony m√°snapja
            ]
            is_holiday = 1 if (date.month, date.day) in holidays else 0
            
            # Iskolai sz√ºnet szimul√°l√°sa
            school_holidays = [
                (7, 1, 8, 31),    # Ny√°ri sz√ºnet
                (12, 20, 1, 10),  # T√©li sz√ºnet
                (4, 1, 4, 10)     # Tavaszi sz√ºnet
            ]
            is_school_break = 0
            for start_month, start_day, end_month, end_day in school_holidays:
                if ((date.month == start_month and date.day >= start_day) or 
                    (date.month == end_month and date.day <= end_day) or
                    (start_month == 12 and end_month == 1 and 
                     (date.month == 12 or date.month == 1))):
                    is_school_break = 1
                    break
            
            # Id≈ëj√°r√°s szimul√°l√°sa szezon alapj√°n
            base_temps = {1: 2, 2: 12, 3: 25, 4: 15}  # √Åtlagh≈ëm√©rs√©kletek szezonk√©nt
            temperature = base_temps[season] + np.random.normal(0, 5)
            
            # Csapad√©k szimul√°l√°sa
            rainfall = max(0, np.random.exponential(2) if np.random.random() < 0.3 else 0)
            
            # Marketing kiad√°s szimul√°l√°sa
            # Magasabb h√©tv√©g√©n √©s √ºnnepnapokon
            base_marketing = 300
            if is_weekend or is_holiday:
                marketing_spend = base_marketing * (1.5 + np.random.random() * 0.5)
            else:
                marketing_spend = base_marketing * (0.8 + np.random.random() * 0.4)
            
            # L√°togat√≥sz√°m szimul√°l√°sa (√∂sszetett f√ºggv√©ny)
            base_visitors = 8000
            
            # Szezon√°lis hat√°s
            seasonal_multiplier = {1: 0.8, 2: 1.1, 3: 1.3, 4: 1.0}[season]
            
            # H√©tv√©ge hat√°s
            weekend_multiplier = 1.4 if is_weekend else 1.0
            
            # √únnepnap hat√°s
            holiday_multiplier = 1.6 if is_holiday else 1.0
            
            # Iskolai sz√ºnet hat√°s
            school_multiplier = 1.2 if is_school_break else 1.0
            
            # Id≈ëj√°r√°s hat√°s
            weather_multiplier = 1.0
            if temperature < 0:
                weather_multiplier *= 0.7
            elif temperature > 30:
                weather_multiplier *= 0.8
            elif 15 <= temperature <= 25:
                weather_multiplier *= 1.1
                
            if rainfall > 5:
                weather_multiplier *= 0.6
            
            # Marketing hat√°s
            marketing_multiplier = 1 + (marketing_spend - 300) / 1000
            
            # V√©letlens√©g
            random_factor = 0.8 + np.random.random() * 0.4
            
            # V√©gs≈ë l√°togat√≥sz√°m
            visitors = int(base_visitors * seasonal_multiplier * weekend_multiplier * 
                          holiday_multiplier * school_multiplier * weather_multiplier * 
                          marketing_multiplier * random_factor)
            
            # Minimum 1000 l√°togat√≥
            visitors = max(1000, visitors)
            
            data.append({
                'datum': date.strftime('%Y-%m-%d'),
                'latogatoszam': visitors,
                'atlaghomerseklet': round(temperature, 1),
                'csapadek': round(rainfall, 1),
                'unnepnap': is_holiday,
                'iskolai_szunet': is_school_break,
                'marketing_kiadas': round(marketing_spend, 0),
                'het_napja': day_of_week,
                'honap': date.month,
                'szezon': season,
                'hetvege': is_weekend
            })
        
        df = pd.DataFrame(data)
        print(f"‚úÖ {len(df)} nap adatai gener√°lva")
        return df
    
    def load_and_clean_data(self, file_path='data/hackathon_data.csv'):
        """
        Adatok bet√∂lt√©se √©s alapvet≈ë tiszt√≠t√°s
        
        Args:
            file_path (str): CSV f√°jl el√©r√©si √∫tja
            
        Returns:
            pd.DataFrame: Tiszt√≠tott adatok
        """
        print(f"üîÑ Adatok bet√∂lt√©se: {file_path}")
        
        try:
            df = pd.read_csv(file_path)
            print(f"‚úÖ {len(df)} sor bet√∂ltve")
        except FileNotFoundError:
            print("‚ö†Ô∏è  Adatf√°jl nem tal√°lhat√≥, minta adatok gener√°l√°sa...")
            df = self.generate_sample_data()
            os.makedirs('data', exist_ok=True)
            df.to_csv(file_path, index=False, encoding='utf-8')
            print(f"‚úÖ Minta adatok mentve: {file_path}")
        
        # Alapvet≈ë adattiszt√≠t√°s
        print("üîÑ Adatok tiszt√≠t√°sa...")
        
        # D√°tum oszlop konvert√°l√°sa
        df['datum'] = pd.to_datetime(df['datum'])
        
        # Hi√°nyz√≥ √©rt√©kek kezel√©se
        numeric_columns = ['latogatoszam', 'atlaghomerseklet', 'csapadek', 'marketing_kiadas']
        for col in numeric_columns:
            if col in df.columns:
                df[col] = df[col].fillna(df[col].median())
        
        # Outlierek kezel√©se (IQR m√≥dszer)
        for col in numeric_columns:
            if col in df.columns:
                Q1 = df[col].quantile(0.25)
                Q3 = df[col].quantile(0.75)
                IQR = Q3 - Q1
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR
                
                # Outlierek capping-je
                df[col] = df[col].clip(lower_bound, upper_bound)
        
        print("‚úÖ Adatok tiszt√≠tva")
        return df
    
    def create_features(self, df):
        """
        √öj jellemz≈ëk l√©trehoz√°sa
        
        Args:
            df (pd.DataFrame): Alapadatok
            
        Returns:
            pd.DataFrame: B≈ëv√≠tett adatok
        """
        print("üîÑ √öj jellemz≈ëk l√©trehoz√°sa...")
        
        df = df.copy()
        
        # D√°tum alap√∫ jellemz≈ëk
        df['ev'] = df['datum'].dt.year
        df['het_szama'] = df['datum'].dt.isocalendar().week
        df['ev_napja'] = df['datum'].dt.dayofyear
        
        # H√©tv√©ge jellemz≈ë (ha nincs)
        if 'hetvege' not in df.columns:
            df['hetvege'] = (df['het_napja'].isin([6, 7])).astype(int)
        
        # Id≈ëj√°r√°s kateg√≥ri√°k
        df['hideg'] = (df['atlaghomerseklet'] < 5).astype(int)
        df['meleg'] = (df['atlaghomerseklet'] > 25).astype(int)
        df['esik'] = (df['csapadek'] > 1).astype(int)
        
        # Marketing kateg√≥ri√°k
        df['alacsony_marketing'] = (df['marketing_kiadas'] < 200).astype(int)
        df['magas_marketing'] = (df['marketing_kiadas'] > 500).astype(int)
        
        # Interakci√≥s jellemz≈ëk
        df['hetvege_es_jo_ido'] = df['hetvege'] * (1 - df['hideg']) * (1 - df['esik'])
        df['unnep_es_marketing'] = df['unnepnap'] * df['magas_marketing']
        
        # Lag jellemz≈ëk (el≈ëz≈ë napi √©rt√©kek)
        df = df.sort_values('datum')
        df['latogatoszam_lag1'] = df['latogatoszam'].shift(1)
        df['atlaghomerseklet_lag1'] = df['atlaghomerseklet'].shift(1)
        
        # Rolling √°tlagok (7 napos)
        df['latogatoszam_7d_avg'] = df['latogatoszam'].rolling(window=7, min_periods=1).mean()
        df['atlaghomerseklet_7d_avg'] = df['atlaghomerseklet'].rolling(window=7, min_periods=1).mean()
        
        print(f"‚úÖ {len([col for col in df.columns if col not in ['datum', 'latogatoszam']])} jellemz≈ë l√©trehozva")
        return df
    
    def encode_categorical(self, df):
        """
        Kategorikus v√°ltoz√≥k k√≥dol√°sa
        
        Args:
            df (pd.DataFrame): Adatok
            
        Returns:
            pd.DataFrame: K√≥dolt adatok
        """
        print("üîÑ Kategorikus v√°ltoz√≥k k√≥dol√°sa...")
        
        df = df.copy()
        
        # One-hot encoding a h√©t napjaihoz
        df_encoded = pd.get_dummies(df, columns=['het_napja'], prefix='nap', dtype=int)
        
        # H√≥nap encoding
        df_encoded = pd.get_dummies(df_encoded, columns=['honap'], prefix='honap', dtype=int)
        
        # Szezon encoding
        df_encoded = pd.get_dummies(df_encoded, columns=['szezon'], prefix='szezon', dtype=int)
        
        print("‚úÖ Kategorikus v√°ltoz√≥k k√≥dolva")
        return df_encoded
    
    def prepare_features_target(self, df):
        """
        Jellemz≈ëk √©s c√©lv√°ltoz√≥ elk√ºl√∂n√≠t√©se
        
        Args:
            df (pd.DataFrame): Teljes adathalmaz
            
        Returns:
            tuple: (X, y) jellemz≈ëk √©s c√©lv√°ltoz√≥
        """
        print("üîÑ Jellemz≈ëk √©s c√©lv√°ltoz√≥ elk√ºl√∂n√≠t√©se...")
        
        # C√©lv√°ltoz√≥
        y = df['latogatoszam'].values
        
        # Jellemz≈ëk (d√°tum √©s c√©lv√°ltoz√≥ kiz√°r√°sa)
        feature_columns = [col for col in df.columns 
                          if col not in ['datum', 'latogatoszam']]
        X = df[feature_columns]
        
        # Numerikus oszlopok sk√°l√°z√°sa
        numeric_columns = X.select_dtypes(include=[np.number]).columns
        X_scaled = X.copy()
        X_scaled[numeric_columns] = self.scaler.fit_transform(X[numeric_columns])
        
        # Scaler ment√©se k√©s≈ëbbi haszn√°latra
        import joblib
        import os
        os.makedirs('models', exist_ok=True)
        joblib.dump(self.scaler, 'models/scaler.joblib')
        print("üíæ Scaler mentve: models/scaler.joblib")
        
        print(f"‚úÖ {X_scaled.shape[1]} jellemz≈ë √©s {len(y)} minta elk√©sz√≠tve")
        return X_scaled, y, feature_columns
    
    def split_data(self, X, y, test_size=0.2, random_state=42):
        """
        Adatok train/test feloszt√°sa
        
        Args:
            X: Jellemz≈ëk
            y: C√©lv√°ltoz√≥
            test_size (float): Test halmaz ar√°nya
            random_state (int): Random seed
            
        Returns:
            tuple: (X_train, X_test, y_train, y_test)
        """
        print(f"üîÑ Adatok feloszt√°sa (train: {1-test_size:.0%}, test: {test_size:.0%})...")
        
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=test_size, random_state=random_state, shuffle=True
        )
        
        print(f"‚úÖ Train: {len(X_train)} minta, Test: {len(X_test)} minta")
        return X_train, X_test, y_train, y_test
    
    def get_data_summary(self, df):
        """
        Adatok √∂sszefoglal√≥ statisztik√°i
        
        Args:
            df (pd.DataFrame): Adatok
            
        Returns:
            dict: √ñsszefoglal√≥ statisztik√°k
        """
        summary = {
            'rows': len(df),
            'columns': len(df.columns),
            'date_range': f"{df['datum'].min()} - {df['datum'].max()}",
            'avg_visitors': df['latogatoszam'].mean(),
            'min_visitors': df['latogatoszam'].min(),
            'max_visitors': df['latogatoszam'].max(),
            'missing_values': df.isnull().sum().sum()
        }
        
        return summary
    
    def full_pipeline(self, file_path='data/hackathon_data.csv'):
        """
        Teljes adat el≈ëk√©sz√≠t√©si pipeline
        
        Args:
            file_path (str): Adatf√°jl el√©r√©si √∫tja
            
        Returns:
            tuple: (X_train, X_test, y_train, y_test, feature_columns, summary)
        """
        print("üöÄ Teljes adat el≈ëk√©sz√≠t√©si pipeline ind√≠t√°sa...\n")
        
        # 1. Adatok bet√∂lt√©se √©s tiszt√≠t√°sa
        df = self.load_and_clean_data(file_path)
        
        # 2. √öj jellemz≈ëk l√©trehoz√°sa
        df = self.create_features(df)
        
        # 3. Kategorikus v√°ltoz√≥k k√≥dol√°sa
        df = self.encode_categorical(df)
        
        # 4. Jellemz≈ëk √©s c√©lv√°ltoz√≥ elk√ºl√∂n√≠t√©se
        X, y, feature_columns = self.prepare_features_target(df)
        
        # 5. Train/test feloszt√°s
        X_train, X_test, y_train, y_test = self.split_data(X, y)
        
        # 6. √ñsszefoglal√≥
        summary = self.get_data_summary(df)
        
        print("\n" + "="*50)
        print("üìä ADAT EL≈êK√âSZ√çT√âS √ñSSZEFOGLAL√ì")
        print("="*50)
        print(f"√ñsszes sor: {summary['rows']:,}")
        print(f"√ñsszes oszlop: {summary['columns']:,}")
        print(f"D√°tum tartom√°ny: {summary['date_range']}")
        print(f"√Åtlagos l√°togat√≥sz√°m: {summary['avg_visitors']:,.0f}")
        print(f"Min l√°togat√≥sz√°m: {summary['min_visitors']:,}")
        print(f"Max l√°togat√≥sz√°m: {summary['max_visitors']:,}")
        print(f"Hi√°nyz√≥ √©rt√©kek: {summary['missing_values']}")
        print(f"Train mint√°k: {len(X_train):,}")
        print(f"Test mint√°k: {len(X_test):,}")
        print("="*50)
        
        return X_train, X_test, y_train, y_test, feature_columns, summary

# P√©lda haszn√°lat
if __name__ == "__main__":
    # Adat el≈ëk√©sz√≠t√©s inicializ√°l√°sa
    data_prep = DataPreparation()
    
    # Teljes pipeline futtat√°sa
    X_train, X_test, y_train, y_test, features, summary = data_prep.full_pipeline()
    
    print("\nüéØ Adat el≈ëk√©sz√≠t√©s befejezve!")
    print(f"Jellemz≈ëk: {len(features)}")
    print(f"Els≈ë 10 jellemz≈ë: {features[:10]}")

