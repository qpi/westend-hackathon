"""
√Åtlagt√≥l val√≥ elt√©r√©s elemz√©se
==============================

Megvizsg√°lja, hogy k√ºl√∂nb√∂z≈ë inputok eset√©n hogyan v√°ltozik az el≈ërejelz√©s
√©s az √°tlagt√≥l val√≥ elt√©r√©s.
"""

import pandas as pd
import numpy as np
import joblib
from datetime import datetime
import sys
import os
sys.path.insert(0, 'src')
from data_preparation import DataPreparation

# Modellek bet√∂lt√©se
model = joblib.load('models/best_model_random_forest.joblib')
scaler = joblib.load('models/scaler.joblib')

# Adatok bet√∂lt√©se az √°tlag kisz√°m√≠t√°s√°hoz
df = pd.read_csv('data/hackathon_data.csv')
GLOBAL_AVG = df['latogatoszam'].mean()

print("üìä √ÅTLAGT√ìL VAL√ì ELT√âR√âS ELEMZ√âSE")
print("=" * 70)
print(f"\nüéØ Glob√°lis √°tlag (minden nap): {GLOBAL_AVG:,.0f} f≈ë")

# Sz√°m√≠tsuk ki a kontextu√°lis √°tlagokat
weekend_avg = df[df['hetvege'] == 1]['latogatoszam'].mean()
weekday_avg = df[df['hetvege'] == 0]['latogatoszam'].mean()
holiday_avg = df[df['unnepnap'] == 1]['latogatoszam'].mean() if 'unnepnap' in df.columns else GLOBAL_AVG

print(f"\nüìÖ Kontextu√°lis √°tlagok:")
print(f"   H√©tv√©ge √°tlag: {weekend_avg:,.0f} f≈ë")
print(f"   H√©tk√∂znap √°tlag: {weekday_avg:,.0f} f≈ë")
print(f"   √únnepnap √°tlag: {holiday_avg:,.0f} f≈ë")

# Feature columns bet√∂lt√©se
data_prep = DataPreparation()
df_features = data_prep.load_and_clean_data('data/hackathon_data.csv')
df_features = data_prep.create_features(df_features)
df_features = data_prep.encode_categorical(df_features)
feature_columns = [col for col in df_features.columns if col not in ['datum', 'latogatoszam']]

print("\n" + "=" * 70)
print("üß™ K√úL√ñNB√ñZ≈ê SZCEN√ÅRI√ìK TESZTEL√âSE")
print("=" * 70)

def make_prediction(date, temp, rain, holiday, school_break, marketing):
    """El≈ërejelz√©s k√©sz√≠t√©se adott param√©terekkel"""
    
    features = {
        'atlaghomerseklet': temp,
        'csapadek': rain,
        'unnepnap': int(holiday),
        'iskolai_szunet': int(school_break),
        'marketing_kiadas': marketing,
        'hetvege': int(date.weekday() >= 5),
        'ev': date.year,
        'het_szama': date.isocalendar()[1],
        'ev_napja': date.timetuple().tm_yday,
        'hideg': int(temp < 5),
        'meleg': int(temp > 25),
        'esik': int(rain > 1),
        'alacsony_marketing': int(marketing < 200),
        'magas_marketing': int(marketing > 500),
    }
    
    features['hetvege_es_jo_ido'] = features['hetvege'] * (1 - features['hideg']) * (1 - features['esik'])
    features['unnep_es_marketing'] = features['unnepnap'] * features['magas_marketing']
    features['latogatoszam_lag1'] = GLOBAL_AVG
    features['atlaghomerseklet_lag1'] = temp
    features['latogatoszam_7d_avg'] = GLOBAL_AVG
    features['atlaghomerseklet_7d_avg'] = temp
    
    # One-hot encoding
    for i in range(1, 8):
        features[f'nap_{i}'] = int(date.weekday() + 1 == i)
    for i in range(1, 13):
        features[f'honap_{i}'] = int(date.month == i)
    
    # Szezon
    month = date.month
    if month in [12, 1, 2]:
        season = 1
    elif month in [3, 4, 5]:
        season = 2
    elif month in [6, 7, 8]:
        season = 3
    else:
        season = 4
    
    for i in range(1, 5):
        features[f'szezon_{i}'] = int(season == i)
    
    # DataFrame √©s sk√°l√°z√°s
    df_test = pd.DataFrame([features])[feature_columns]
    numeric_columns = df_test.select_dtypes(include=[np.number]).columns
    df_scaled = df_test.copy()
    df_scaled[numeric_columns] = scaler.transform(df_test[numeric_columns])
    
    return model.predict(df_scaled)[0]

# Tesztszcen√°ri√≥k
scenarios = [
    # (n√©v, d√°tum, h≈ëm, es≈ë, √ºnnep, sz√ºnet, marketing)
    ("√Åtlagos h√©tk√∂znap", datetime(2024, 9, 18), 20, 0, False, False, 300),
    ("Es≈ës h√©tk√∂znap", datetime(2024, 9, 18), 20, 10, False, False, 300),
    ("Hideg h√©tk√∂znap", datetime(2024, 9, 18), -5, 0, False, False, 300),
    ("Meleg h√©tk√∂znap", datetime(2024, 9, 18), 35, 0, False, False, 300),
    
    ("√Åtlagos h√©tv√©ge", datetime(2024, 9, 21), 20, 0, False, False, 300),
    ("Es≈ës h√©tv√©ge", datetime(2024, 9, 21), 20, 10, False, False, 300),
    ("Hideg h√©tv√©ge", datetime(2024, 9, 21), -5, 0, False, False, 300),
    ("Meleg h√©tv√©ge", datetime(2024, 9, 21), 35, 0, False, False, 300),
    
    ("√únnepnap", datetime(2024, 12, 25), 0, 2, True, True, 500),
    ("Alacsony marketing", datetime(2024, 9, 18), 20, 0, False, False, 100),
    ("Magas marketing", datetime(2024, 9, 18), 20, 0, False, False, 800),
]

print("\nüìä El≈ërejelz√©sek √©s elt√©r√©sek:\n")
print(f"{'Szcen√°ri√≥':<25} {'El≈ërejelz√©s':>12} {'Glob. elt√©r√©s':>15} {'Kontextu√°lis':>15}")
print("-" * 70)

results = []
for name, date, temp, rain, holiday, school_break, marketing in scenarios:
    pred = make_prediction(date, temp, rain, holiday, school_break, marketing)
    
    # Glob√°lis elt√©r√©s (amit most haszn√°lunk)
    global_diff = (pred - GLOBAL_AVG) / GLOBAL_AVG * 100
    
    # Kontextu√°lis elt√©r√©s (amit haszn√°lhatn√°nk)
    if date.weekday() >= 5:
        context_avg = weekend_avg
        context_type = "h√©tv√©ge"
    elif holiday:
        context_avg = holiday_avg
        context_type = "√ºnnep"
    else:
        context_avg = weekday_avg
        context_type = "h√©tk√∂znap"
    
    context_diff = (pred - context_avg) / context_avg * 100
    
    print(f"{name:<25} {pred:>12,.0f} {global_diff:>14.1f}% {context_diff:>14.1f}%")
    results.append((name, pred, global_diff, context_diff))

# Elemz√©s
print("\n" + "=" * 70)
print("üìà ELEMZ√âS")
print("=" * 70)

# Min-max √©rt√©kek
preds = [r[1] for r in results]
min_pred = min(preds)
max_pred = max(preds)
pred_range = max_pred - min_pred

print(f"\nüéØ El≈ërejelz√©sek tartom√°nya:")
print(f"   Minimum: {min_pred:,.0f} f≈ë")
print(f"   Maximum: {max_pred:,.0f} f≈ë")
print(f"   Terjedelem: {pred_range:,.0f} f≈ë ({pred_range/GLOBAL_AVG*100:.1f}% a glob√°lis √°tlaghoz k√©pest)")

# Glob√°lis elt√©r√©sek
global_diffs = [r[2] for r in results]
print(f"\nüìä Glob√°lis √°tlagt√≥l val√≥ elt√©r√©sek:")
print(f"   Min elt√©r√©s: {min(global_diffs):.1f}%")
print(f"   Max elt√©r√©s: {max(global_diffs):.1f}%")
print(f"   Elt√©r√©sek terjedelme: {max(global_diffs) - min(global_diffs):.1f} sz√°zal√©kpont")

print("\n‚ùó PROBL√âMA MAGYAR√ÅZATA:")
print("-" * 40)
print("""
1. Az el≈ërejelz√©sek sz≈±k tartom√°nyban mozognak (7,800 - 14,500 f≈ë)
   m√≠g az √°tlag 10,974 f≈ë.

2. Az "√°tlagt√≥l val√≥ elt√©r√©s" mindig a GLOB√ÅLIS √°tlaghoz (10,974) 
   viszony√≠t, nem a kontextu√°lis √°tlaghoz.

3. A modell f≈ë befoly√°sol√≥ t√©nyez≈ëi:
   - Marketing kiad√°s (36.6%)
   - 7 napos √°tlag (26.0%)
   - H√©tv√©ge √©s j√≥ id≈ë (15.2%)
   
4. Ezek domin√°lj√°k az el≈ërejelz√©st, m√°s t√©nyez≈ëk (pl. csapad√©k)
   alig v√°ltoztatnak az eredm√©nyen.

5. MEGOLD√ÅSI JAVASLAT:
   - Kontextu√°lis √°tlag haszn√°lata (h√©tv√©ge/h√©tk√∂znap/√ºnnep)
   - Sz√°zal√©kos v√°ltoz√°s helyett abszol√∫t √©rt√©k megjelen√≠t√©se
   - T√∂bb kontextus megjelen√≠t√©se (pl. "h√©tv√©g√©khez k√©pest")
""")

