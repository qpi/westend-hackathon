"""
Westend Hackathon - Modell L√©trehoz√≥ Script
==========================================

Ez a script felel≈ës a bev√°s√°rl√≥k√∂zpont l√°togat√≥sz√°m el≈ërejelz≈ë modell
teljes l√©trehoz√°s√°√©rt, betan√≠t√°s√°√©rt √©s ment√©s√©√©rt.

Haszn√°lat:
    python create_model.py

Kimenet:
    - models/best_model_random_forest.joblib
    - outputs/model_results.csv
    - outputs/*.png (vizualiz√°ci√≥k)
"""

import sys
import os
from datetime import datetime

# Saj√°t modulok import√°l√°sa
sys.path.append('src')
from data_preparation import DataPreparation
from machine_learning_models import MLModels

def main():
    """
    F≈ë modell l√©trehoz√°si folyamat
    """
    print("üöÄ WESTEND HACKATHON - MODELL L√âTREHOZ√ÅS")
    print("=" * 60)
    print(f"‚è∞ Ind√≠t√°s: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # 1. Adat el≈ëk√©sz√≠t√©s
        print("üìä 1. L√âP√âS: ADAT EL≈êK√âSZ√çT√âS")
        print("-" * 40)
        
        data_prep = DataPreparation()
        X_train, X_test, y_train, y_test, feature_names, summary = data_prep.full_pipeline()
        
        print(f"‚úÖ Adat el≈ëk√©sz√≠t√©s befejezve")
        print(f"   - Train mint√°k: {len(X_train):,}")
        print(f"   - Test mint√°k: {len(X_test):,}")
        print(f"   - Jellemz≈ëk: {len(feature_names)}")
        
        # 2. Modell betan√≠t√°s
        print(f"\nü§ñ 2. L√âP√âS: MODELL BETAN√çT√ÅS")
        print("-" * 40)
        
        ml_models = MLModels()
        ml_models.initialize_models()
        ml_models.train_models(X_train, y_train)
        
        print(f"‚úÖ {len(ml_models.trained_models)} modell betan√≠tva")
        
        # 3. Modell √©rt√©kel√©s
        print(f"\nüìä 3. L√âP√âS: MODELL √âRT√âKEL√âS")
        print("-" * 40)
        
        ml_models.evaluate_models(X_train, y_train, X_test, y_test)
        ml_models.get_feature_importance(feature_names)
        
        # 4. Eredm√©nyek √©s legjobb modell
        print(f"\nüèÜ 4. L√âP√âS: EREDM√âNYEK")
        print("-" * 40)
        
        best_model_name = ml_models.print_results_summary()
        
        # 5. Vizualiz√°ci√≥k
        print(f"\nüìà 5. L√âP√âS: VIZUALIZ√ÅCI√ìK")
        print("-" * 40)
        
        ml_models.create_visualizations(y_test, feature_names)
        
        # 6. Modellek ment√©se
        print(f"\nüíæ 6. L√âP√âS: MODELLEK MENT√âSE")
        print("-" * 40)
        
        ml_models.save_models(best_model_name)
        
        # 7. √ñsszefoglal√≥
        print(f"\nüéØ MODELL L√âTREHOZ√ÅS BEFEJEZVE!")
        print("=" * 60)
        print(f"üèÜ Legjobb modell: {best_model_name}")
        print(f"üìÅ Modell f√°jl: models/best_model_{best_model_name.replace(' ', '_').lower()}.joblib")
        print(f"üìä Eredm√©nyek: outputs/model_results.csv")
        print(f"üìà Vizualiz√°ci√≥k: outputs/*.png")
        print(f"‚è∞ Befejez√©s: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # 8. Gyors valid√°ci√≥
        print(f"\n‚úÖ GYORS VALID√ÅCI√ì")
        print("-" * 30)
        
        best_results = ml_models.results[best_model_name]
        print(f"Test R¬≤: {best_results['test_r2']:.4f}")
        print(f"Test RMSE: {best_results['test_rmse']:.0f} f≈ë")
        print(f"Test MAPE: {best_results['test_mape']:.2f}%")
        
        if best_results['test_r2'] > 0.8:
            print("üéâ Kiv√°l√≥ modell teljes√≠tm√©ny!")
        elif best_results['test_r2'] > 0.7:
            print("‚úÖ J√≥ modell teljes√≠tm√©ny!")
        else:
            print("‚ö†Ô∏è Modell teljes√≠tm√©ny jav√≠that√≥!")
            
        return True
        
    except Exception as e:
        print(f"\n‚ùå HIBA A MODELL L√âTREHOZ√ÅS SOR√ÅN:")
        print(f"   {str(e)}")
        print(f"\nüîß JAVASOLT MEGOLD√ÅSOK:")
        print("   1. Ellen≈ërizze a data/hackathon_data.csv f√°jl l√©tez√©s√©t")
        print("   2. Futtassa: python src/data_preparation.py")
        print("   3. Ellen≈ërizze a sz√ºks√©ges k√∂nyvt√°rak telep√≠t√©s√©t")
        return False

def quick_demo():
    """
    Gyors demo az elk√©sz√ºlt modellel
    """
    print(f"\nüîÆ GYORS DEMO - EL≈êREJELZ√âS")
    print("-" * 40)
    
    try:
        # Modell bet√∂lt√©se
        import joblib
        model = joblib.load('models/best_model_random_forest.joblib')
        
        # Demo el≈ërejelz√©s (egyszer≈±s√≠tett)
        # Norm√°l h√©tk√∂znap: 15¬∞C, 0mm es≈ë, 300 EUR marketing
        demo_features = np.zeros(43)  # 43 jellemz≈ë (a t√©nyleges modellb≈ël)
        demo_features[0] = 15  # h≈ëm√©rs√©klet
        demo_features[1] = 0   # csapad√©k
        demo_features[4] = 300 # marketing
        
        prediction = model.predict([demo_features])[0]
        print(f"Demo el≈ërejelz√©s: {prediction:,.0f} f≈ë")
        print("‚úÖ Modell m≈±k√∂dik!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Demo nem futtathat√≥: {str(e)}")

if __name__ == "__main__":
    print("üéØ Westend Hackathon - Modell L√©trehoz√°s")
    print("Futtassa ezt a scriptet a teljes modell pipeline l√©trehoz√°s√°hoz!\n")
    
    success = main()
    
    if success:
        print(f"\nüöÄ K√ñVETKEZ≈ê L√âP√âSEK:")
        print("   1. Streamlit app ind√≠t√°sa: streamlit run web_app/streamlit_app_standalone.py")
        print("   2. Jupyter notebook megnyit√°sa: notebooks/hackathon_demo.ipynb")
        print("   3. Prezent√°ci√≥ el≈ëk√©sz√≠t√©se a demo script alapj√°n")
        
        # Gyors demo futtat√°sa
        quick_demo()
    else:
        print(f"\nüîß K√©rj√ºk jav√≠tsa a hib√°kat √©s pr√≥b√°lja √∫jra!")
