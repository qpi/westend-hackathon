"""
Westend Hackathon - Streamlit Web Application
============================================

Interakt√≠v web alkalmaz√°s a bev√°s√°rl√≥k√∂zpont l√°togat√≥sz√°m el≈ërejelz√©shez.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
# import plotly.graph_objects as go
# from plotly.subplots import make_subplots
import joblib
import os
import sys
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Projekt √∫tvonal hozz√°ad√°sa
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.insert(0, parent_dir)

try:
    # Import m√≥dos√≠t√°sa a helyes √∫tvonal haszn√°lat√°hoz
    sys.path.insert(0, os.path.join(parent_dir, 'src'))
    from data_preparation import DataPreparation
except ImportError as e:
    st.error(f"Modul import√°l√°si hiba: {e}")
    st.error("üìÅ Ellen≈ërizze, hogy a src k√∂nyvt√°rban vannak-e a sz√ºks√©ges Python f√°jlok:")
    st.error("   - src/data_preparation.py")
    st.stop()

# Oldal konfigur√°ci√≥
st.set_page_config(
    page_title="üè¨ Westend L√°togat√≥sz√°m El≈ërejelz≈ë",
    page_icon="üè¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS st√≠lus
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .prediction-result {
        background-color: #e8f4fd;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border: 2px solid #1f77b4;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Adatok bet√∂lt√©se cache-elve"""
    try:
        # Use extended dataset if generated
        data_path = 'data/hackathon_data_full.csv' if os.path.exists('data/hackathon_data_full.csv') else 'data/hackathon_data.csv'
        data = pd.read_csv(data_path)
        data['datum'] = pd.to_datetime(data['datum'])
        return data
    except FileNotFoundError:
        st.error("Adatf√°jl nem tal√°lhat√≥! Futtassa el≈ëbb a data_preparation.py scriptet.")
        return None

@st.cache_resource
def load_model_and_scaler():
    """Modell √©s scaler bet√∂lt√©se cache-elve"""
    try:
        model = joblib.load('models/best_model_random_forest.joblib')
        
        # Scaler √∫jra l√©trehoz√°sa a training adatokb√≥l
        data_prep = DataPreparation()
        df = data_prep.load_and_clean_data('data/hackathon_data.csv')
        df = data_prep.create_features(df)
        df = data_prep.encode_categorical(df)
        X, y, feature_columns = data_prep.prepare_features_target(df)
        
        return model, data_prep.scaler, feature_columns
    except FileNotFoundError:
        st.error("Modell f√°jl nem tal√°lhat√≥! Futtassa el≈ëbb a machine_learning_models.py scriptet.")
        return None, None, None

@st.cache_data
def load_results():
    """Modell eredm√©nyek bet√∂lt√©se"""
    try:
        results = pd.read_csv('outputs/model_results.csv', index_col=0)
        return results
    except FileNotFoundError:
        return None

def create_prediction_features(date, temperature, rainfall, is_holiday,
                             is_school_break, marketing_spend, scaler,
                             feature_columns, historical_data=None):
    """
    El≈ërejelz√©shez sz√ºks√©ges jellemz≈ëk l√©trehoz√°sa √©s sk√°l√°z√°sa

    Args:
        date: Predikci√≥ d√°tuma
        temperature: H≈ëm√©rs√©klet (¬∞C)
        rainfall: Csapad√©k (mm)
        is_holiday: √únnepnap-e
        is_school_break: Iskolai sz√ºnet van-e
        marketing_spend: Marketing k√∂lt√©s (EUR)
        scaler: StandardScaler objektum
        feature_columns: Haszn√°lt jellemz≈ëk list√°ja
        historical_data: Historikus adatok DataFrame (opcion√°lis)

    Returns:
        DataFrame: Sk√°l√°zott jellemz≈ëk
    """
    
    # Alapvet≈ë jellemz≈ëk
    features = {
        'atlaghomerseklet': temperature,
        'csapadek': rainfall,
        'unnepnap': int(is_holiday),
        'iskolai_szunet': int(is_school_break),
        'marketing_kiadas': marketing_spend,
        'hetvege': int(date.weekday() >= 5),
        'ev': date.year,
        'het_szama': date.isocalendar()[1],
        'ev_napja': date.timetuple().tm_yday,
    }
    
    # Id≈ëj√°r√°s kateg√≥ri√°k
    features['hideg'] = int(temperature < 5)
    features['meleg'] = int(temperature > 25)
    features['esik'] = int(rainfall > 1)
    
    # Marketing kateg√≥ri√°k
    features['alacsony_marketing'] = int(marketing_spend < 200)
    features['magas_marketing'] = int(marketing_spend > 500)
    
    # Interakci√≥s jellemz≈ëk
    features['hetvege_es_jo_ido'] = features['hetvege'] * (1 - features['hideg']) * (1 - features['esik'])
    features['unnep_es_marketing'] = features['unnepnap'] * features['magas_marketing']
    
    # Lag jellemz≈ëk - VAL√ìDI historikus adatokb√≥l sz√°m√≠t√°sa
    if historical_data is not None and not historical_data.empty:
        # El≈ëz≈ë napi √©rt√©k keres√©se
        prev_date = pd.Timestamp(date) - pd.Timedelta(days=1)
        prev_day_data = historical_data[historical_data['datum'] == prev_date]

        if not prev_day_data.empty:
            # Val√≥di el≈ëz≈ë napi √©rt√©kek haszn√°lata
            features['latogatoszam_lag1'] = prev_day_data['latogatoszam'].values[0]
            features['atlaghomerseklet_lag1'] = prev_day_data['atlaghomerseklet'].values[0]
            print(f"üìä Val√≥di el≈ëz≈ë napi √©rt√©k: {features['latogatoszam_lag1']:.0f} f≈ë ({prev_date.strftime('%Y-%m-%d')})")
        else:
            # Ha nincs adat az el≈ëz≈ë napra, haszn√°ljuk az √°tlagot
            features['latogatoszam_lag1'] = historical_data['latogatoszam'].mean()
            features['atlaghomerseklet_lag1'] = historical_data['atlaghomerseklet'].mean()
            print(f"‚ö†Ô∏è Nincs adat az el≈ëz≈ë napra, √°tlag haszn√°lata: {features['latogatoszam_lag1']:.0f} f≈ë")

        # 7 napos √°tlag sz√°m√≠t√°sa
        week_start = pd.Timestamp(date) - pd.Timedelta(days=7)
        week_end = pd.Timestamp(date)
        week_data = historical_data[
            (historical_data['datum'] >= week_start) &
            (historical_data['datum'] < week_end)
        ]

        if not week_data.empty and len(week_data) >= 3:
            # Val√≥di 7 napos √°tlag haszn√°lata
            features['latogatoszam_7d_avg'] = week_data['latogatoszam'].mean()
            features['atlaghomerseklet_7d_avg'] = week_data['atlaghomerseklet'].mean()
            print(f"üìä Val√≥di 7 napos √°tlag: {features['latogatoszam_7d_avg']:.0f} f≈ë ({len(week_data)} nap adata alapj√°n)")
        else:
            # Ha nincs el√©g adat, haszn√°ljuk az √°tlagot
            features['latogatoszam_7d_avg'] = historical_data['latogatoszam'].mean()
            features['atlaghomerseklet_7d_avg'] = historical_data['atlaghomerseklet'].mean()
            print(f"‚ö†Ô∏è Nincs el√©g 7 napos adat, √°tlag haszn√°lata: {features['latogatoszam_7d_avg']:.0f} f≈ë")
    else:
        # Lag jellemz≈ëk - ER≈êS√çTETT v√°ltoz√°s a bemeneti param√©terek alapj√°n
        base_visitors = 10974  # √Åtlagos l√°togat√≥sz√°m az adatokb√≥l
        
        # Becs√ºlt l√°togat√≥sz√°m a jelenlegi param√©terek alapj√°n
        estimated_visitors = base_visitors
        
        # H≈ëm√©rs√©klet hat√°sa - ER≈êS√çTVE
        if temperature < 0:
            estimated_visitors *= 0.3  # ER≈êS√çTVE: 0.7 -> 0.3 (nagyon hideg)
        elif temperature < 5:
            estimated_visitors *= 0.5  # Hideg
        elif temperature > 35:
            estimated_visitors *= 0.4  # ER≈êS√çTVE: 0.8 -> 0.4 (nagyon meleg)
        elif temperature > 30:
            estimated_visitors *= 0.6  # Meleg
        elif 15 <= temperature <= 25:
            estimated_visitors *= 1.3  # ER≈êS√çTVE: 1.1 -> 1.3 (t√∂k√©letes id≈ë)
        
        # Es≈ë hat√°sa - ER≈êS√çTVE
        if rainfall > 20:
            estimated_visitors *= 0.2  # ER≈êS√çTVE: 0.6 -> 0.2 (er≈ës es≈ë)
        elif rainfall > 5:
            estimated_visitors *= 0.4  # ER≈êS√çTVE: 0.6 -> 0.4 (es≈ë)
        
        # Speci√°lis napok hat√°sa - ER≈êS√çTVE
        if is_holiday:
            estimated_visitors *= 2.5  # ER≈êS√çTVE: 1.6 -> 2.5 (√ºnnepnap)
        if is_school_break:
            estimated_visitors *= 1.8  # ER≈êS√çTVE: 1.2 -> 1.8 (iskolai sz√ºnet)
        if date.weekday() >= 5:  # H√©tv√©ge
            estimated_visitors *= 2.0  # ER≈êS√çTVE: 1.4 -> 2.0 (h√©tv√©ge)
        
        # Marketing hat√°sa - ER≈êS√çTVE
        if marketing_spend > 800:
            estimated_visitors *= 2.0  # ER≈êS√çTVE: 1.2 -> 2.0 (magas marketing)
        elif marketing_spend > 500:
            estimated_visitors *= 1.5  # K√∂zepes marketing
        elif marketing_spend < 100:
            estimated_visitors *= 0.5  # ER≈êS√çTVE: 0.9 -> 0.5 (alacsony marketing)
        
        # Lag jellemz≈ëk becsl√©se - NAGY v√°ltoz√°s
        features['latogatoszam_lag1'] = estimated_visitors * 0.8  # ER≈êS√çTVE: 0.95 -> 0.8
        features['atlaghomerseklet_lag1'] = temperature
        features['latogatoszam_7d_avg'] = estimated_visitors * 1.2  # ER≈êS√çTVE: 1.05 -> 1.2
        features['atlaghomerseklet_7d_avg'] = temperature
        print("‚ö†Ô∏è Lag jellemz≈ëk ER≈êS√çTETT becsl√©ssel")
    
    # H√©t napjai (one-hot encoding)
    for i in range(1, 8):
        features[f'nap_{i}'] = int(date.weekday() + 1 == i)
    
    # H√≥napok (one-hot encoding)
    for i in range(1, 13):
        features[f'honap_{i}'] = int(date.month == i)
    
    # Szezonok (one-hot encoding)
    month = date.month
    if month in [12, 1, 2]:
        season = 1  # T√©l
    elif month in [3, 4, 5]:
        season = 2  # Tavasz
    elif month in [6, 7, 8]:
        season = 3  # Ny√°r
    else:
        season = 4  # ≈êsz
    
    for i in range(1, 5):
        features[f'szezon_{i}'] = int(season == i)
    
    # DataFrame l√©trehoz√°sa helyes oszlop sorrenddel
    df = pd.DataFrame([features])
    df = df[feature_columns]  # Helyes sorrend biztos√≠t√°sa
    
    # Numerikus oszlopok sk√°l√°z√°sa
    numeric_columns = df.select_dtypes(include=[np.number]).columns
    df_scaled = df.copy()
    df_scaled[numeric_columns] = scaler.transform(df[numeric_columns])
    
    return df_scaled

def main():
    # F≈ëc√≠m
    st.markdown('<h1 class="main-header">üè¨ Westend L√°togat√≥sz√°m El≈ërejelz≈ë</h1>', unsafe_allow_html=True)
    
    # Adatok √©s modell bet√∂lt√©se
    data = load_data()
    model, scaler, feature_columns = load_model_and_scaler()
    results = load_results()
    
    if data is None or model is None or scaler is None:
        st.stop()
    
    # Sidebar - Navig√°ci√≥
    st.sidebar.title("üìä Navig√°ci√≥")
    page = st.sidebar.selectbox(
        "V√°lasszon oldalt:",
        ["üéØ El≈ërejelz√©s", "üìà Adatok √Åttekint√©se", "ü§ñ Modell Teljes√≠tm√©ny", "üìä Vizualiz√°ci√≥k"]
    )
    
    if page == "üéØ El≈ërejelz√©s":
        prediction_page(model, data, scaler, feature_columns)
    elif page == "üìà Adatok √Åttekint√©se":
        data_overview_page(data)
    elif page == "ü§ñ Modell Teljes√≠tm√©ny":
        model_performance_page(results)
    elif page == "üìä Vizualiz√°ci√≥k":
        visualizations_page(data)

def prediction_page(model, data, scaler, feature_columns):
    """El≈ërejelz√©s oldal"""
    st.header("üéØ L√°togat√≥sz√°m El≈ërejelz√©s")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("üìÖ D√°tum √©s Id≈ëj√°r√°s")
        
        # D√°tum kiv√°laszt√°s
        prediction_date = st.date_input(
            "V√°lasszon d√°tumot:",
            value=datetime.now().date(),
            min_value=data['datum'].min().date(),
            max_value=datetime(2025, 12, 31).date()
        )
        
        # Id≈ëj√°r√°s param√©terek
        temperature = st.slider(
            "√Åtlagh≈ëm√©rs√©klet (¬∞C):",
            min_value=-10, max_value=40, value=15, step=1
        )
        
        rainfall = st.slider(
            "Csapad√©k (mm):",
            min_value=0.0, max_value=100.0, value=0.0, step=0.5,
            help="0mm = sz√°raz id≈ë, 5-10mm = enyhe es≈ë, 10-20mm = k√∂zepes es≈ë, 20-50mm = er≈ës es≈ë, 50mm+ = viharos id≈ë"
        )
    
    with col2:
        st.subheader("üé™ Speci√°lis Napok √©s Marketing")
        
        # Speci√°lis napok
        is_holiday = st.checkbox("√únnepnap")
        is_school_break = st.checkbox("Iskolai sz√ºnet")
        
        # Marketing k√∂lt√©s
        marketing_spend = st.slider(
            "Marketing kiad√°s (EUR):",
            min_value=0, max_value=1000, value=300, step=10
        )
    
    # Figyelmeztet√©s j√∂v≈ëbeli d√°tumok eset√©n
    if prediction_date > data['datum'].max().date():
        st.warning(f"‚ö†Ô∏è **Figyelmeztet√©s:** {prediction_date} d√°tuma k√≠v√ºl esik az el√©rhet≈ë historikus adatok tartom√°ny√°n ({data['datum'].min().date()} - {data['datum'].max().date()}).\n\nA predikci√≥ √°ltal√°nos √°tlagokat fog haszn√°lni a lag √©rt√©kek helyett.")
    elif prediction_date < data['datum'].min().date():
        st.info(f"‚ÑπÔ∏è **Inform√°ci√≥:** {prediction_date} d√°tuma a rendelkez√©sre √°ll√≥ adatok el≈ëtt van. A predikci√≥ √°ltal√°nos √°tlagokat fog haszn√°lni.")

    # El≈ërejelz√©s gomb
    if st.button("üîÆ L√°togat√≥sz√°m El≈ërejelz√©se", type="primary"):
        
        # Jellemz≈ëk l√©trehoz√°sa
        features_df = create_prediction_features(
            prediction_date, temperature, rainfall,
            is_holiday, is_school_break, marketing_spend,
            scaler, feature_columns, data  # ‚úÖ Historikus adatok √°tad√°sa
        )
        
        # El≈ërejelz√©s
        try:
            prediction = model.predict(features_df)[0]
            
            # Eredm√©ny megjelen√≠t√©se
            st.markdown("---")
            st.markdown('<div class="prediction-result">', unsafe_allow_html=True)
            st.markdown(f"### üéØ El≈ërejelzett l√°togat√≥sz√°m: **{prediction:,.0f} f≈ë**")
            
            # Kontextus inform√°ci√≥k - KONTEXTU√ÅLIS √ÅTLAG haszn√°lata
            global_avg = data['latogatoszam'].mean()
            
            # Kontextu√°lis √°tlag kisz√°m√≠t√°sa
            if is_holiday:
                # √únnepnapi √°tlag
                context_avg = data[data['unnepnap'] == 1]['latogatoszam'].mean() if 'unnepnap' in data.columns else global_avg * 1.9
                context_type = "√ºnnepnapi"
            elif prediction_date.weekday() >= 5:
                # H√©tv√©gi √°tlag
                context_avg = data[data['hetvege'] == 1]['latogatoszam'].mean() if 'hetvege' in data.columns else global_avg * 1.4
                context_type = "h√©tv√©gi"
            else:
                # H√©tk√∂znapi √°tlag
                context_avg = data[data['hetvege'] == 0]['latogatoszam'].mean() if 'hetvege' in data.columns else global_avg * 0.82
                context_type = "h√©tk√∂znapi"
            
            # Elt√©r√©sek sz√°m√≠t√°sa
            difference_from_global = prediction - global_avg
            difference_from_context = prediction - context_avg
            percentage_diff_global = (difference_from_global / global_avg) * 100
            percentage_diff_context = (difference_from_context / context_avg) * 100
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("El≈ërejelz√©s", f"{prediction:,.0f}", f"{difference_from_context:+.0f}")
            with col2:
                st.metric(f"{context_type.capitalize()} √°tlagt√≥l", 
                         f"{percentage_diff_context:+.1f}%",
                         help=f"√Åtlagos {context_type} l√°togat√≥sz√°m: {context_avg:,.0f} f≈ë")
            with col3:
                if percentage_diff_context > 10:
                    st.success(f"üü¢ {context_type.capitalize()} √°tlag felett")
                elif percentage_diff_context < -10:
                    st.warning(f"üü° {context_type.capitalize()} √°tlag alatt")
                else:
                    st.info(f"üîµ √Åtlagos {context_type} forgalom")
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            # R√©szletes kontextus inform√°ci√≥
            with st.expander("üìä R√©szletes statisztik√°k"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write("**Kontextu√°lis √∂sszehasonl√≠t√°s:**")
                    st.write(f"‚Ä¢ {context_type.capitalize()} √°tlag: {context_avg:,.0f} f≈ë")
                    st.write(f"‚Ä¢ Elt√©r√©s: {percentage_diff_context:+.1f}%")
                    st.write(f"‚Ä¢ K√ºl√∂nbs√©g: {difference_from_context:+,.0f} f≈ë")
                with col2:
                    st.write("**Glob√°lis √∂sszehasonl√≠t√°s:**")
                    st.write(f"‚Ä¢ Teljes √°tlag: {global_avg:,.0f} f≈ë")
                    st.write(f"‚Ä¢ Elt√©r√©s: {percentage_diff_global:+.1f}%")
                    st.write(f"‚Ä¢ K√ºl√∂nbs√©g: {difference_from_global:+,.0f} f≈ë")
            
            # T√©nyez≈ëk hat√°sa
            st.markdown("### üìä Befoly√°sol√≥ T√©nyez≈ëk")
            factors_col1, factors_col2 = st.columns(2)
            
            with factors_col1:
                st.write("**Pozit√≠v hat√°sok:**")
                if prediction_date.weekday() >= 5:
                    st.write("‚Ä¢ üìÖ H√©tv√©ge (+40% v√°rhat√≥)")
                if is_holiday:
                    st.write("‚Ä¢ üéâ √únnepnap (+60% v√°rhat√≥)")
                if is_school_break:
                    st.write("‚Ä¢ üè´ Iskolai sz√ºnet (+20% v√°rhat√≥)")
                if 15 <= temperature <= 25:
                    st.write("‚Ä¢ üå§Ô∏è Kellemes id≈ëj√°r√°s (+10% v√°rhat√≥)")
                if marketing_spend > 400:
                    st.write("‚Ä¢ üì¢ Magas marketing kiad√°s")
            
            with factors_col2:
                st.write("**Negat√≠v hat√°sok:**")
                if temperature < 0:
                    st.write("‚Ä¢ ü•∂ Fagyos id≈ë (-30% v√°rhat√≥)")
                elif temperature > 30:
                    st.write("‚Ä¢ üî• T√∫l meleg (-20% v√°rhat√≥)")
                if rainfall > 20:
                    st.write(f"‚Ä¢ üåßÔ∏è Viharos es≈ë ({rainfall:.1f}mm, -50% v√°rhat√≥)")
                elif rainfall > 10:
                    st.write(f"‚Ä¢ üåßÔ∏è Er≈ës es≈ë ({rainfall:.1f}mm, -40% v√°rhat√≥)")
                elif rainfall > 5:
                    st.write(f"‚Ä¢ üåßÔ∏è K√∂zepes es≈ë ({rainfall:.1f}mm, -25% v√°rhat√≥)")
                elif rainfall > 1:
                    st.write(f"‚Ä¢ üåßÔ∏è Enyhe es≈ë ({rainfall:.1f}mm, -10% v√°rhat√≥)")
                if prediction_date.weekday() < 5 and not is_holiday:
                    st.write("‚Ä¢ üìÖ H√©tk√∂znap")
                if marketing_spend < 200:
                    st.write("‚Ä¢ üì¢ Alacsony marketing kiad√°s")
            
        except Exception as e:
            st.error(f"El≈ërejelz√©si hiba: {str(e)}")

def data_overview_page(data):
    """Adatok √°ttekint√©se oldal"""
    st.header("üìà Adatok √Åttekint√©se")
    
    # D√°tum tartom√°ny kiv√°laszt√°s
    st.subheader("üìÖ Id≈ëszak Kiv√°laszt√°sa")
    col1, col2 = st.columns(2)
    
    with col1:
        start_date = st.date_input(
            "Kezd≈ë d√°tum:",
            value=data['datum'].min(),
            min_value=data['datum'].min(),
            max_value=data['datum'].max()
        )
    
    with col2:
        end_date = st.date_input(
            "Z√°r√≥ d√°tum:",
            value=data['datum'].max(),
            min_value=data['datum'].min(),
            max_value=data['datum'].max()
        )
    
    # Adatok sz≈±r√©se a kiv√°lasztott d√°tum tartom√°nyra
    filtered_data = data[
        (data['datum'] >= pd.to_datetime(start_date)) & 
        (data['datum'] <= pd.to_datetime(end_date))
    ]
    
    if len(filtered_data) == 0:
        st.warning("Nincs adat a kiv√°lasztott id≈ëszakban!")
        return
    
    # Alapstatisztik√°k a sz≈±rt adatokra
    st.subheader(f"üìä Statisztik√°k ({start_date} - {end_date})")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Napok sz√°ma", f"{len(filtered_data):,}")
    with col2:
        st.metric("√Åtlagos l√°togat√≥sz√°m", 
                 f"{filtered_data['latogatoszam'].mean():,.0f}")
    with col3:
        st.metric("Maximum l√°togat√≥sz√°m", 
                 f"{filtered_data['latogatoszam'].max():,.0f}")
    with col4:
        st.metric("Minimum l√°togat√≥sz√°m", 
                 f"{filtered_data['latogatoszam'].min():,.0f}")
    
    # Id≈ësor grafikon
    st.subheader("üìÖ L√°togat√≥sz√°m Id≈ësor")
    
    fig = px.line(filtered_data, x='datum', y='latogatoszam', 
                  title=f'Napi L√°togat√≥sz√°m Alakul√°sa ({start_date} - {end_date})')
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)
    
    # Heti √©s havi mint√°zatok a sz≈±rt adatokra
    col1, col2 = st.columns(2)
    
    with col1:
        # Heti mint√°zat
        if 'het_napja' in filtered_data.columns:
            weekly_data = filtered_data.groupby('het_napja')['latogatoszam'].mean().reset_index()
            days = ['H√©tf≈ë', 'Kedd', 'Szerda', 'Cs√ºt√∂rt√∂k', 'P√©ntek', 'Szombat', 'Vas√°rnap']
            weekly_data['nap_neve'] = [days[i-1] for i in weekly_data['het_napja']]
            
            fig_weekly = px.bar(weekly_data, x='nap_neve', y='latogatoszam',
                               title='√Åtlagos L√°togat√≥sz√°m Napok Szerint (Sz≈±rt Id≈ëszak)')
            st.plotly_chart(fig_weekly, use_container_width=True)
    
    with col2:
        # Havi mint√°zat
        if 'honap' in filtered_data.columns:
            monthly_data = filtered_data.groupby('honap')['latogatoszam'].mean().reset_index()
            months = ['Jan', 'Feb', 'M√°r', '√Åpr', 'M√°j', 'J√∫n', 
                     'J√∫l', 'Aug', 'Szep', 'Okt', 'Nov', 'Dec']
            monthly_data['honap_neve'] = [months[i-1] for i in monthly_data['honap']]
            
            fig_monthly = px.bar(monthly_data, x='honap_neve', y='latogatoszam',
                                title='√Åtlagos L√°togat√≥sz√°m H√≥napok Szerint (Sz≈±rt Id≈ëszak)')
            st.plotly_chart(fig_monthly, use_container_width=True)
    
    # Id≈ëj√°r√°si √∂sszef√ºgg√©sek a sz≈±rt id≈ëszakra
    st.subheader("üå§Ô∏è Id≈ëj√°r√°si √ñsszef√ºgg√©sek")
    col1, col2 = st.columns(2)
    
    with col1:
        # H≈ëm√©rs√©klet vs l√°togat√≥sz√°m
        fig_temp = px.scatter(filtered_data, x='atlaghomerseklet', y='latogatoszam',
                             title='H≈ëm√©rs√©klet vs L√°togat√≥sz√°m (Sz≈±rt Id≈ëszak)',
                             trendline="ols")
        st.plotly_chart(fig_temp, use_container_width=True)
    
    with col2:
        # Marketing vs l√°togat√≥sz√°m
        fig_marketing = px.scatter(filtered_data, x='marketing_kiadas', y='latogatoszam',
                                  title='Marketing Kiad√°s vs L√°togat√≥sz√°m (Sz≈±rt Id≈ëszak)',
                                  trendline="ols")
        st.plotly_chart(fig_marketing, use_container_width=True)
    
    # Adatok t√°bl√°zat
    st.subheader("üìã Adatok T√°bl√°zat (Sz≈±rt Id≈ëszak)")
    
    # Oszlopok kiv√°laszt√°sa megjelen√≠t√©shez
    display_columns = ['datum', 'latogatoszam', 'atlaghomerseklet', 'csapadek', 
                      'marketing_kiadas', 'hetvege', 'unnepnap']
    available_columns = [col for col in display_columns if col in filtered_data.columns]
    
    st.dataframe(
        filtered_data[available_columns].head(min(100, len(filtered_data))), 
        use_container_width=True
    )
    
    # √ñsszefoglal√≥ statisztik√°k
    st.subheader("üìä R√©szletes Statisztik√°k")
    numeric_columns = filtered_data.select_dtypes(include=[np.number]).columns
    if len(numeric_columns) > 0:
        st.dataframe(
            filtered_data[numeric_columns].describe().round(2), 
            use_container_width=True
        )

def model_performance_page(results):
    """Modell teljes√≠tm√©ny oldal"""
    st.header("ü§ñ Modell Teljes√≠tm√©ny")
    
    if results is None:
        st.warning("Modell eredm√©nyek nem el√©rhet≈ëk.")
        return
    
    # Teljes√≠tm√©ny metrik√°k
    st.subheader("üìä Modell √ñsszehasonl√≠t√°s")
    
    # Metrik√°k t√°bl√°zat
    display_results = results[['test_rmse', 'test_r2', 'test_mape', 'cv_rmse']].copy()
    display_results.columns = ['Test RMSE', 'Test R¬≤', 'Test MAPE (%)', 'CV RMSE']
    display_results = display_results.round(4)
    
    st.dataframe(display_results, use_container_width=True)
    
    # Legjobb modell kiemel√©se
    best_model = display_results.index[0]
    st.success(f"üèÜ Legjobb modell: **{best_model}**")
    
    # Teljes√≠tm√©ny vizualiz√°ci√≥k
    col1, col2 = st.columns(2)
    
    with col1:
        # RMSE √∂sszehasonl√≠t√°s
        fig_rmse = px.bar(
            x=display_results.index, 
            y=display_results['Test RMSE'],
            title='Test RMSE √ñsszehasonl√≠t√°s',
            labels={'x': 'Modell', 'y': 'RMSE'}
        )
        st.plotly_chart(fig_rmse, use_container_width=True)
    
    with col2:
        # R¬≤ √∂sszehasonl√≠t√°s
        fig_r2 = px.bar(
            x=display_results.index, 
            y=display_results['Test R¬≤'],
            title='Test R¬≤ √ñsszehasonl√≠t√°s',
            labels={'x': 'Modell', 'y': 'R¬≤'}
        )
        st.plotly_chart(fig_r2, use_container_width=True)
    
    # Modell interpret√°l√°s
    st.subheader("üîç Modell Interpret√°l√°s")
    st.write("""
    **RMSE (Root Mean Square Error)**: Az el≈ërejelz√©si hiba m√©rt√©ke. Min√©l kisebb, ann√°l jobb.
    
    **R¬≤ (Determin√°ci√≥s egy√ºtthat√≥)**: A modell √°ltal magyar√°zott variancia ar√°nya (0-1 k√∂z√∂tt). Min√©l k√∂zelebb van 1-hez, ann√°l jobb.
    
    **MAPE (Mean Absolute Percentage Error)**: Az √°tlagos sz√°zal√©kos hiba. √úzleti szempontb√≥l k√∂nnyen √©rtelmezhet≈ë.
    
    **CV RMSE (Cross-Validation RMSE)**: Cross-validation alap√∫ RMSE, ami a modell √°ltal√°nos√≠t√°si k√©pess√©g√©t mutatja.
    """)

def visualizations_page(data):
    """Vizualiz√°ci√≥k oldal"""
    st.header("üìä R√©szletes Vizualiz√°ci√≥k")
    
    # D√°tum tartom√°ny kiv√°laszt√°s
    st.subheader("üìÖ Id≈ëszak Kiv√°laszt√°sa a Vizualiz√°ci√≥khoz")
    col1, col2 = st.columns(2)
    
    with col1:
        start_date = st.date_input(
            "Kezd≈ë d√°tum:",
            value=data['datum'].min(),
            min_value=data['datum'].min(),
            max_value=data['datum'].max(),
            key="viz_start_date"
        )
    
    with col2:
        end_date = st.date_input(
            "Z√°r√≥ d√°tum:",
            value=data['datum'].max(),
            min_value=data['datum'].min(),
            max_value=data['datum'].max(),
            key="viz_end_date"
        )
    
    # Adatok sz≈±r√©se
    filtered_data = data[
        (data['datum'] >= pd.to_datetime(start_date)) & 
        (data['datum'] <= pd.to_datetime(end_date))
    ]
    
    if len(filtered_data) == 0:
        st.warning("Nincs adat a kiv√°lasztott id≈ëszakban!")
        return
    
    st.info(f"üìä Vizualiz√°ci√≥k {len(filtered_data)} napra ({start_date} - {end_date})")
    
    # Korrel√°ci√≥s heatmap
    st.subheader("üî• Korrel√°ci√≥s Heatmap")
    
    numeric_cols = ['latogatoszam', 'atlaghomerseklet', 'csapadek', 'marketing_kiadas']
    available_numeric_cols = [col for col in numeric_cols if col in filtered_data.columns]
    
    if len(available_numeric_cols) > 1:
        corr_matrix = filtered_data[available_numeric_cols].corr()
        
        fig_heatmap = px.imshow(corr_matrix, 
                               text_auto=True, 
                               aspect="auto",
                               title=f"V√°ltoz√≥k K√∂z√∂tti Korrel√°ci√≥ ({start_date} - {end_date})")
        st.plotly_chart(fig_heatmap, use_container_width=True)
    
    # Id≈ëj√°r√°s hat√°sa
    st.subheader("üå§Ô∏è Id≈ëj√°r√°s Hat√°sa")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # H≈ëm√©rs√©klet vs l√°togat√≥sz√°m
        if 'atlaghomerseklet' in filtered_data.columns:
            fig_temp = px.scatter(filtered_data, x='atlaghomerseklet', y='latogatoszam',
                                 title=f'H≈ëm√©rs√©klet vs L√°togat√≥sz√°m ({start_date} - {end_date})',
                                 trendline="ols")
            st.plotly_chart(fig_temp, use_container_width=True)
    
    with col2:
        # Csapad√©k hat√°sa
        if 'csapadek' in filtered_data.columns:
            filtered_data_copy = filtered_data.copy()
            filtered_data_copy['esik'] = filtered_data_copy['csapadek'] > 1
            rain_effect = filtered_data_copy.groupby('esik')['latogatoszam'].mean().reset_index()
            rain_effect['esik'] = rain_effect['esik'].map({True: 'Es≈ës', False: 'Sz√°raz'})
            
            fig_rain = px.bar(rain_effect, x='esik', y='latogatoszam',
                             title=f'Csapad√©k Hat√°sa a L√°togat√≥sz√°mra ({start_date} - {end_date})')
            st.plotly_chart(fig_rain, use_container_width=True)
    
    # Marketing hat√°s
    st.subheader("üì¢ Marketing Hat√°s")
    
    if 'marketing_kiadas' in filtered_data.columns:
        # Marketing k√∂lt√©s vs l√°togat√≥sz√°m
        fig_marketing = px.scatter(filtered_data, x='marketing_kiadas', y='latogatoszam',
                                  title=f'Marketing Kiad√°s vs L√°togat√≥sz√°m ({start_date} - {end_date})',
                                  trendline="ols")
        st.plotly_chart(fig_marketing, use_container_width=True)
    
    # Szezon√°lis mint√°zatok
    st.subheader("üçÇ Szezon√°lis Mint√°zatok")
    
    if 'szezon' in filtered_data.columns:
        seasonal_data = filtered_data.groupby('szezon')['latogatoszam'].mean().reset_index()
        seasons = {1: 'T√©l', 2: 'Tavasz', 3: 'Ny√°r', 4: '≈êsz'}
        seasonal_data['szezon_neve'] = seasonal_data['szezon'].map(seasons)
        
        fig_seasonal = px.bar(seasonal_data, x='szezon_neve', y='latogatoszam',
                             title=f'√Åtlagos L√°togat√≥sz√°m √âvszakok Szerint ({start_date} - {end_date})')
        st.plotly_chart(fig_seasonal, use_container_width=True)
    
    # H√©tv√©ge vs h√©tk√∂znap √∂sszehasonl√≠t√°s
    st.subheader("üìÖ H√©tv√©ge vs H√©tk√∂znap")
    
    if 'hetvege' in filtered_data.columns:
        weekend_data = filtered_data.groupby('hetvege')['latogatoszam'].mean().reset_index()
        weekend_data['nap_tipus'] = weekend_data['hetvege'].map({0: 'H√©tk√∂znap', 1: 'H√©tv√©ge'})
        
        fig_weekend = px.bar(weekend_data, x='nap_tipus', y='latogatoszam',
                            title=f'H√©tv√©ge vs H√©tk√∂znap L√°togatotts√°g ({start_date} - {end_date})')
        st.plotly_chart(fig_weekend, use_container_width=True)
    
    # Id≈ëszakos trendek
    st.subheader("üìà Id≈ëszakos Trendek")
    
    if len(filtered_data) > 30:  # Csak ha elegend≈ë adat van
        # Havi trend
        filtered_data_copy = filtered_data.copy()
        filtered_data_copy['year_month'] = filtered_data_copy['datum'].dt.to_period('M').astype(str)
        monthly_trend = filtered_data_copy.groupby('year_month')['latogatoszam'].mean().reset_index()
        
        fig_trend = px.line(monthly_trend, x='year_month', y='latogatoszam',
                           title=f'Havi √Åtlagos L√°togatotts√°g Trend ({start_date} - {end_date})')
        fig_trend.update_xaxes(tickangle=45)
        st.plotly_chart(fig_trend, use_container_width=True)

if __name__ == "__main__":
    main()
